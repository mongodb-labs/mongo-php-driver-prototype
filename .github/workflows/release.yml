name: "Release New Version"
run-name: "Release ${{ inputs.version }}"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to be released. This is checked for consistency with the branch name and configuration"
        required: true
        type: "string"
      jira-version-number:
        description: "JIRA version ID (e.g. 54321)"
        required: true
        type: "string"

env:
  # TODO: Use different token
  GH_TOKEN: ${{ secrets.MERGE_UP_TOKEN }}
  GIT_AUTHOR_NAME: "DBX PHP Release Bot"
  GIT_AUTHOR_EMAIL: "dbx-php@mongodb.com"
  default-release-message: |
    The PHP team is happy to announce that version {0} of the [mongodb](https://pecl.php.net/package/mongodb) PHP extension is now available on PECL.

    **Release Highlights**

    TODO: one or more paragraphs describing important changes in this release

    A complete list of resolved issues in this release may be found in [JIRA](https://jira.mongodb.org/secure/ReleaseNote.jspa?version={1}&projectId=12484).

    **Documentation**

    Documentation is available on [PHP.net](https://php.net/set.mongodb).

    **Installation**

    You can either download and install the source manually, or you can install the extension with:

    ```
    pecl install mongodb-{0}
    ```

    or update with:

    ```
    pecl upgrade mongodb-{0}
    ```

    Windows binaries are attached to the GitHub release notes.

jobs:
  prepare-release:
    name: "Prepare release"
    runs-on: ubuntu-latest

    steps:
      - name: "Create release output"
        run: echo '🎬 Release process for version ${{ inputs.version }} started by @${{ github.triggering_actor }}' >> $GITHUB_STEP_SUMMARY

      - uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ env.GH_TOKEN }}

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"

      - name: "Update version information to stable release"
        run: ./bin/update-release-version.php to-stable

      - name: "Read current package version"
        run: echo "PACKAGE_VERSION=$(./bin/update-release-version.php get-version)" >> "$GITHUB_ENV"

      # Sanity check - the version from the input and the one determined by phongo_version.h need to be the same
      - name: "Check version for consistency"
        if: ${{ inputs.version != env.PACKAGE_VERSION }}
        # We exit with an error to abort the workflow. This is only run if the versions don't match
        run: |
          echo '❌ Release failed due to version mismatch: expected ${{ inputs.version }}, got ${{ env.PACKAGE_VERSION }} from code' >> $GITHUB_STEP_SUMMARY
          exit 1

      #
      # Preliminary checks done - commence the release process
      #

      - name: "Set git author information"
        run: |
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"

      # Create a draft release with a changelog
      # TODO: Consider using the API to generate changelog
      - name: "Create draft release with generated changelog"
        run: gh release create ${{ env.PACKAGE_VERSION }} --target ${{ github.ref_name }} --generate-notes --draft

      - name: "Read changelog from draft release"
        run: gh release view ${{ env.PACKAGE_VERSION }} --json body --template '{{ .body }}' >> changelog

      - name: Create the envfile
        run: |
          pip install -U -q setuptools
          cat << EOF > envfile
          GRS_CONFIG_USER1_USERNAME=${{ secrets.GRS_CONFIG_USER1_USERNAME }}
          GRS_CONFIG_USER1_PASSWORD=${{ secrets.GRS_CONFIG_USER1_PASSWORD }}
          GPG_KEY_ID=${{ vars.GPG_KEY_ID }}
          PACKAGE_VERSION=${{ env.PACKAGE_VERSION }}
          EOF

      - name: Log in to artifactory
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}
          registry: artifactory.corp.mongodb.com

      # This step creates the "Package x.y.z" commit that will be the base of
      # our tag and creates the release tag. This is run inside the container in
      # order to create signed git artifacts
      - name: "Create package commit and release tag"
        run: |
          podman run \
            --env-file=envfile \
            --rm \
            -v $(pwd):$(pwd) \
            -w $(pwd) \
            ${{ vars.ARTIFACTORY_IMAGE }} \
            /bin/bash -c "$(pwd)/.github/workflows/commit-and-tag.sh"

      - name: "Bump to next development release"
        run: ./bin/update-release-version.php to-next-patch-dev

      # Create a signed "back to -dev" commit, again inside the container
      - name: "Create dev commit"
        run: |
          podman run \
            --env-file=envfile \
            --rm \
            -v $(pwd):$(pwd) \
            -w $(pwd) \
            ${{ vars.ARTIFACTORY_IMAGE }} \
            /bin/bash -c "$(pwd)/.github/workflows/dev-commit.sh"

      # TODO: Manually merge using ours strategy. This avoids merge-up pull requests being created
      # Process is:
      # 1. switch to next branch (according to merge-up action)
      # 2. merge release branch using --strategy=ours
      # 3. push next branch
      # 4. switch back to release branch, then push

      - name: "Push changes from release branch"
        run: git push

      - name: "Prepare release message"
        run: |
          cat > release-message <<'EOL'
          ${{ format(env.default-release-message, env.PACKAGE_VERSION, inputs.jira-version-number) }}
          EOL
          cat changelog >> release-message

      # Update release with correct release information
      - name: "Update release information"
        run: echo "RELEASE_URL=$(gh release edit ${{ env.PACKAGE_VERSION }} --title "${{ env.PACKAGE_VERSION }}" --notes-file release-message)" >> "$GITHUB_ENV"

      # Pushing the release tag starts build processes that then produce artifacts for the release
      - name: "Push release tag"
        run: git push origin ${{ env.PACKAGE_VERSION }}

      - name: "Set summary"
        run: |
          echo '🚀 Created tag and drafted release for version [${{ inputs.version }}](${{ env.RELEASE_URL }})' >> $GITHUB_STEP_SUMMARY
          echo '✍️ You may now update the release notes and publish the release when ready' >> $GITHUB_STEP_SUMMARY
